import { localize } from '../../nls.js';
import { RawContextKey } from '../../platform/contextkey/common/contextkey.js';
var EditorContextKeys;
( ((function(EditorContextKeys) {
    EditorContextKeys.editorSimpleInput = ( (new RawContextKey('editorSimpleInput', false, true)));
    EditorContextKeys.editorTextFocus = ( (new RawContextKey('editorTextFocus', false, ( localize(1611, "Whether the editor text has focus (cursor is blinking)")))));
    EditorContextKeys.focus = ( (new RawContextKey('editorFocus', false, ( localize(
     1612,
     "Whether the editor or an editor widget has focus (e.g. focus is in the find widget)"
    )))));
    EditorContextKeys.textInputFocus = ( (new RawContextKey('textInputFocus', false, ( localize(
     1613,
     "Whether an editor or a rich text input has focus (cursor is blinking)"
    )))));
    EditorContextKeys.readOnly = ( (new RawContextKey('editorReadonly', false, ( localize(1614, "Whether the editor is read-only")))));
    EditorContextKeys.inDiffEditor = ( (new RawContextKey('inDiffEditor', false, ( localize(1615, "Whether the context is a diff editor")))));
    EditorContextKeys.isEmbeddedDiffEditor = ( (new RawContextKey('isEmbeddedDiffEditor', false, ( localize(1616, "Whether the context is an embedded diff editor")))));
    EditorContextKeys.inMultiDiffEditor = ( (new RawContextKey('inMultiDiffEditor', false, ( localize(1617, "Whether the context is a multi diff editor")))));
    EditorContextKeys.multiDiffEditorAllCollapsed = ( (new RawContextKey('multiDiffEditorAllCollapsed', undefined, ( localize(1618, "Whether all files in multi diff editor are collapsed")))));
    EditorContextKeys.hasChanges = ( (new RawContextKey('diffEditorHasChanges', false, ( localize(1619, "Whether the diff editor has changes")))));
    EditorContextKeys.comparingMovedCode = ( (new RawContextKey('comparingMovedCode', false, ( localize(1620, "Whether a moved code block is selected for comparison")))));
    EditorContextKeys.accessibleDiffViewerVisible = ( (new RawContextKey('accessibleDiffViewerVisible', false, ( localize(1621, "Whether the accessible diff viewer is visible")))));
    EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached = ( (new RawContextKey('diffEditorRenderSideBySideInlineBreakpointReached', false, ( localize(
     1622,
     "Whether the diff editor render side by side inline breakpoint is reached"
    )))));
    EditorContextKeys.diffEditorInlineMode = ( (new RawContextKey('diffEditorInlineMode', false, ( localize(1623, "Whether inline mode is active")))));
    EditorContextKeys.diffEditorOriginalWritable = ( (new RawContextKey('diffEditorOriginalWritable', false, ( localize(1624, "Whether modified is writable in the diff editor")))));
    EditorContextKeys.diffEditorModifiedWritable = ( (new RawContextKey('diffEditorModifiedWritable', false, ( localize(1625, "Whether modified is writable in the diff editor")))));
    EditorContextKeys.diffEditorOriginalUri = ( (new RawContextKey('diffEditorOriginalUri', '', ( localize(1626, "The uri of the original document")))));
    EditorContextKeys.diffEditorModifiedUri = ( (new RawContextKey('diffEditorModifiedUri', '', ( localize(1627, "The uri of the modified document")))));
    EditorContextKeys.columnSelection = ( (new RawContextKey('editorColumnSelection', false, ( localize(1628, "Whether `editor.columnSelection` is enabled")))));
    EditorContextKeys.writable = ( (EditorContextKeys.readOnly.toNegated()));
    EditorContextKeys.hasNonEmptySelection = ( (new RawContextKey('editorHasSelection', false, ( localize(1629, "Whether the editor has text selected")))));
    EditorContextKeys.hasOnlyEmptySelection = ( (EditorContextKeys.hasNonEmptySelection.toNegated()));
    EditorContextKeys.hasMultipleSelections = ( (new RawContextKey('editorHasMultipleSelections', false, ( localize(1630, "Whether the editor has multiple selections")))));
    EditorContextKeys.hasSingleSelection = ( (EditorContextKeys.hasMultipleSelections.toNegated()));
    EditorContextKeys.tabMovesFocus = ( (new RawContextKey('editorTabMovesFocus', false, ( localize(1631, "Whether `Tab` will move focus out of the editor")))));
    EditorContextKeys.tabDoesNotMoveFocus = ( (EditorContextKeys.tabMovesFocus.toNegated()));
    EditorContextKeys.isInEmbeddedEditor = ( (new RawContextKey('isInEmbeddedEditor', false, true)));
    EditorContextKeys.canUndo = ( (new RawContextKey('canUndo', false, true)));
    EditorContextKeys.canRedo = ( (new RawContextKey('canRedo', false, true)));
    EditorContextKeys.hoverVisible = ( (new RawContextKey('editorHoverVisible', false, ( localize(1632, "Whether the editor hover is visible")))));
    EditorContextKeys.hoverFocused = ( (new RawContextKey('editorHoverFocused', false, ( localize(1633, "Whether the editor hover is focused")))));
    EditorContextKeys.stickyScrollFocused = ( (new RawContextKey('stickyScrollFocused', false, ( localize(1634, "Whether the sticky scroll is focused")))));
    EditorContextKeys.stickyScrollVisible = ( (new RawContextKey('stickyScrollVisible', false, ( localize(1635, "Whether the sticky scroll is visible")))));
    EditorContextKeys.standaloneColorPickerVisible = ( (new RawContextKey('standaloneColorPickerVisible', false, ( localize(1636, "Whether the standalone color picker is visible")))));
    EditorContextKeys.standaloneColorPickerFocused = ( (new RawContextKey('standaloneColorPickerFocused', false, ( localize(1637, "Whether the standalone color picker is focused")))));
    EditorContextKeys.inCompositeEditor = ( (new RawContextKey('inCompositeEditor', undefined, ( localize(1638, "Whether the editor is part of a larger editor (e.g. notebooks)")))));
    EditorContextKeys.notInCompositeEditor = ( (EditorContextKeys.inCompositeEditor.toNegated()));
    EditorContextKeys.languageId = ( (new RawContextKey('editorLangId', '', ( localize(1639, "The language identifier of the editor")))));
    EditorContextKeys.hasCompletionItemProvider = ( (new RawContextKey('editorHasCompletionItemProvider', false, ( localize(1640, "Whether the editor has a completion item provider")))));
    EditorContextKeys.hasCodeActionsProvider = ( (new RawContextKey('editorHasCodeActionsProvider', false, ( localize(1641, "Whether the editor has a code actions provider")))));
    EditorContextKeys.hasCodeLensProvider = ( (new RawContextKey('editorHasCodeLensProvider', false, ( localize(1642, "Whether the editor has a code lens provider")))));
    EditorContextKeys.hasDefinitionProvider = ( (new RawContextKey('editorHasDefinitionProvider', false, ( localize(1643, "Whether the editor has a definition provider")))));
    EditorContextKeys.hasDeclarationProvider = ( (new RawContextKey('editorHasDeclarationProvider', false, ( localize(1644, "Whether the editor has a declaration provider")))));
    EditorContextKeys.hasImplementationProvider = ( (new RawContextKey('editorHasImplementationProvider', false, ( localize(1645, "Whether the editor has an implementation provider")))));
    EditorContextKeys.hasTypeDefinitionProvider = ( (new RawContextKey('editorHasTypeDefinitionProvider', false, ( localize(1646, "Whether the editor has a type definition provider")))));
    EditorContextKeys.hasHoverProvider = ( (new RawContextKey('editorHasHoverProvider', false, ( localize(1647, "Whether the editor has a hover provider")))));
    EditorContextKeys.hasDocumentHighlightProvider = ( (new RawContextKey('editorHasDocumentHighlightProvider', false, ( localize(1648, "Whether the editor has a document highlight provider")))));
    EditorContextKeys.hasDocumentSymbolProvider = ( (new RawContextKey('editorHasDocumentSymbolProvider', false, ( localize(1649, "Whether the editor has a document symbol provider")))));
    EditorContextKeys.hasReferenceProvider = ( (new RawContextKey('editorHasReferenceProvider', false, ( localize(1650, "Whether the editor has a reference provider")))));
    EditorContextKeys.hasRenameProvider = ( (new RawContextKey('editorHasRenameProvider', false, ( localize(1651, "Whether the editor has a rename provider")))));
    EditorContextKeys.hasSignatureHelpProvider = ( (new RawContextKey('editorHasSignatureHelpProvider', false, ( localize(1652, "Whether the editor has a signature help provider")))));
    EditorContextKeys.hasInlayHintsProvider = ( (new RawContextKey('editorHasInlayHintsProvider', false, ( localize(1653, "Whether the editor has an inline hints provider")))));
    EditorContextKeys.hasDocumentFormattingProvider = ( (new RawContextKey('editorHasDocumentFormattingProvider', false, ( localize(1654, "Whether the editor has a document formatting provider")))));
    EditorContextKeys.hasDocumentSelectionFormattingProvider = ( (new RawContextKey('editorHasDocumentSelectionFormattingProvider', false, ( localize(1655, "Whether the editor has a document selection formatting provider")))));
    EditorContextKeys.hasMultipleDocumentFormattingProvider = ( (new RawContextKey('editorHasMultipleDocumentFormattingProvider', false, ( localize(1656, "Whether the editor has multiple document formatting providers")))));
    EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = ( (new RawContextKey(
     'editorHasMultipleDocumentSelectionFormattingProvider',
     false,
     ( localize(
      1657,
      "Whether the editor has multiple document selection formatting providers"
     ))
    )));
})(EditorContextKeys || (EditorContextKeys = {}))));
export { EditorContextKeys };
