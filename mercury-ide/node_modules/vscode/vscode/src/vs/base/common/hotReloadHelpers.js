import { isHotReloadEnabled, registerHotReloadHandler } from './hotReload.js';
import './arrays.js';
import './observableInternal/derived.js';
import './observableInternal/autorun.js';
import { observableSignalFromEvent } from './observableInternal/utils.js';
import './cancellation.js';
function readHotReloadableExport(value, reader) {
    observeHotReloadableExports([value], reader);
    return value;
}
function observeHotReloadableExports(values, reader) {
    if (isHotReloadEnabled()) {
        const o = observableSignalFromEvent('reload', event => registerHotReloadHandler(({ oldExports }) => {
            if (!( [...( Object.values(oldExports))].some(v => values.includes(v)))) {
                return undefined;
            }
            return (_newExports) => {
                event(undefined);
                return true;
            };
        }));
        o.read(reader);
    }
}
export { observeHotReloadableExports, readHotReloadableExport };
