import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { isHotReloadEnabled } from '../../../base/common/hotReload.js';
import { readHotReloadableExport } from '../../../base/common/hotReloadHelpers.js';
import '../../../base/common/arrays.js';
import '../../../base/common/observableInternal/derived.js';
import { autorunWithStore } from '../../../base/common/observableInternal/autorun.js';
import '../../../base/common/observableInternal/utils.js';
import '../../../base/common/cancellation.js';
import { IInstantiationService } from '../../instantiation/common/instantiation.js';
function wrapInReloadableClass0(getClass) {
    return !isHotReloadEnabled() ? getClass() : createWrapper(getClass, BaseClass0);
}
class BaseClass {
    constructor(instantiationService) {
        this.instantiationService = instantiationService;
    }
    init(...params) { }
}
function createWrapper(getClass, B) {
    return (class ReloadableWrapper extends B {
        constructor() {
            super(...arguments);
            this._autorun = undefined;
        }
        init(...params) {
            this._autorun = autorunWithStore((reader, store) => {
                const clazz = readHotReloadableExport(getClass(), reader);
                store.add(this.instantiationService.createInstance(clazz, ...params));
            });
        }
        dispose() {
            this._autorun?.dispose();
        }
    });
}
let BaseClass0 = class BaseClass0 extends BaseClass {
    constructor(i) { super(i); this.init(); }
};
BaseClass0 = ( __decorate([
    ( __param(0, IInstantiationService))
], BaseClass0));
function wrapInReloadableClass1(getClass) {
    return !isHotReloadEnabled() ? getClass() : createWrapper(getClass, BaseClass1);
}
let BaseClass1 = class BaseClass1 extends BaseClass {
    constructor(param1, i) { super(i); this.init(param1); }
};
BaseClass1 = ( __decorate([
    ( __param(1, IInstantiationService))
], BaseClass1));
export { wrapInReloadableClass0, wrapInReloadableClass1 };
