import { localize } from '../../../../nls.js';
import { Color, RGBA } from '../../../../base/common/color.js';
import { registerColor, transparent, lighten, darken } from '../colorUtils.js';
import { foreground, contrastBorder, iconForeground, focusBorder } from './baseColors.js';
import { editorWidgetBackground } from './editorColors.js';
const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, ( localize(1813, "Input box background.")));
const inputForeground = registerColor('input.foreground', foreground, ( localize(1814, "Input box foreground.")));
const inputBorder = registerColor('input.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, ( localize(1815, "Input box border.")));
const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hcDark: contrastBorder, hcLight: contrastBorder }, ( localize(1816, "Border color of activated options in input fields.")));
const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null }, ( localize(1817, "Background color of activated options in input fields.")));
const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: ( (transparent(focusBorder, 0.4))), light: ( (transparent(focusBorder, 0.2))), hcDark: Color.transparent, hcLight: Color.transparent }, ( localize(1818, "Background hover color of options in input fields.")));
const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hcDark: foreground, hcLight: foreground }, ( localize(1819, "Foreground color of activated options in input fields.")));
const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: ( (transparent(foreground, 0.5))), dark: ( (transparent(foreground, 0.5))), hcDark: ( (transparent(foreground, 0.7))), hcLight: ( (transparent(foreground, 0.7))) }, ( localize(1820, "Input box foreground color for placeholder text.")));
const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white }, ( localize(1821, "Input validation background color for information severity.")));
const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, ( localize(1822, "Input validation foreground color for information severity.")));
const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder }, ( localize(1823, "Input validation border color for information severity.")));
const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white }, ( localize(1824, "Input validation background color for warning severity.")));
const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, ( localize(1825, "Input validation foreground color for warning severity.")));
const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder }, ( localize(1826, "Input validation border color for warning severity.")));
const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white }, ( localize(1827, "Input validation background color for error severity.")));
const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, ( localize(1828, "Input validation foreground color for error severity.")));
const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, ( localize(1829, "Input validation border color for error severity.")));
const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, ( localize(1830, "Dropdown background.")));
const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hcDark: Color.black, hcLight: Color.white }, ( localize(1831, "Dropdown list background.")));
const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: foreground, hcDark: Color.white, hcLight: foreground }, ( localize(1832, "Dropdown foreground.")));
const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder }, ( localize(1833, "Dropdown border.")));
const buttonForeground = registerColor('button.foreground', Color.white, ( localize(1834, "Button foreground color.")));
const buttonSeparator = registerColor('button.separator', ( (transparent(buttonForeground, .4))), ( localize(1835, "Button separator color.")));
const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' }, ( localize(1836, "Button background color.")));
const buttonHoverBackground = registerColor('button.hoverBackground', { dark: ( (lighten(buttonBackground, 0.2))), light: ( (darken(buttonBackground, 0.2))), hcDark: buttonBackground, hcLight: buttonBackground }, ( localize(1837, "Button background color when hovering.")));
const buttonBorder = registerColor('button.border', contrastBorder, ( localize(1838, "Button border color.")));
const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground }, ( localize(1839, "Secondary button foreground color.")));
const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white }, ( localize(1840, "Secondary button background color.")));
const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: ( (lighten(buttonSecondaryBackground, 0.2))), light: ( (darken(buttonSecondaryBackground, 0.2))), hcDark: null, hcLight: null }, ( localize(1841, "Secondary button background color when hovering.")));
const radioActiveForeground = registerColor('radio.activeForeground', inputActiveOptionForeground, ( localize(1842, "Foreground color of active radio option.")));
const radioActiveBackground = registerColor('radio.activeBackground', inputActiveOptionBackground, ( localize(1843, "Background color of active radio option.")));
const radioActiveBorder = registerColor('radio.activeBorder', inputActiveOptionBorder, ( localize(1844, "Border color of the active radio option.")));
const radioInactiveForeground = registerColor('radio.inactiveForeground', null, ( localize(1845, "Foreground color of inactive radio option.")));
const radioInactiveBackground = registerColor('radio.inactiveBackground', null, ( localize(1846, "Background color of inactive radio option.")));
const radioInactiveBorder = registerColor('radio.inactiveBorder', { light: ( (transparent(radioActiveForeground, .2))), dark: ( (transparent(radioActiveForeground, .2))), hcDark: ( (transparent(radioActiveForeground, .4))), hcLight: ( (transparent(radioActiveForeground, .2))) }, ( localize(1847, "Border color of the inactive radio option.")));
const radioInactiveHoverBackground = registerColor('radio.inactiveHoverBackground', inputActiveOptionHoverBackground, ( localize(1848, "Background color of inactive active radio option when hovering.")));
const checkboxBackground = registerColor('checkbox.background', selectBackground, ( localize(1849, "Background color of checkbox widget.")));
registerColor('checkbox.selectBackground', editorWidgetBackground, ( localize(
 1850,
 "Background color of checkbox widget when the element it's in is selected."
)));
const checkboxForeground = registerColor('checkbox.foreground', selectForeground, ( localize(1851, "Foreground color of checkbox widget.")));
const checkboxBorder = registerColor('checkbox.border', selectBorder, ( localize(1852, "Border color of checkbox widget.")));
registerColor('checkbox.selectBorder', iconForeground, ( localize(
 1853,
 "Border color of checkbox widget when the element it's in is selected."
)));
const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: ( (new Color( (new RGBA(128, 128, 128, 0.17))))), light: ( (new Color( (new RGBA(221, 221, 221, 0.4))))), hcDark: Color.transparent, hcLight: Color.transparent }, ( localize(
 1854,
 "Keybinding label background color. The keybinding label is used to represent a keyboard shortcut."
)));
const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: ( (Color.fromHex('#CCCCCC'))), light: ( (Color.fromHex('#555555'))), hcDark: Color.white, hcLight: foreground }, ( localize(
 1855,
 "Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut."
)));
const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: ( (new Color( (new RGBA(51, 51, 51, 0.6))))), light: ( (new Color( (new RGBA(204, 204, 204, 0.4))))), hcDark: ( (new Color( (new RGBA(111, 195, 223))))), hcLight: contrastBorder }, ( localize(
 1856,
 "Keybinding label border color. The keybinding label is used to represent a keyboard shortcut."
)));
const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: ( (new Color( (new RGBA(68, 68, 68, 0.6))))), light: ( (new Color( (new RGBA(187, 187, 187, 0.4))))), hcDark: ( (new Color( (new RGBA(111, 195, 223))))), hcLight: foreground }, ( localize(
 1857,
 "Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut."
)));
export { buttonBackground, buttonBorder, buttonForeground, buttonHoverBackground, buttonSecondaryBackground, buttonSecondaryForeground, buttonSecondaryHoverBackground, buttonSeparator, checkboxBackground, checkboxBorder, checkboxForeground, inputActiveOptionBackground, inputActiveOptionBorder, inputActiveOptionForeground, inputActiveOptionHoverBackground, inputBackground, inputBorder, inputForeground, inputPlaceholderForeground, inputValidationErrorBackground, inputValidationErrorBorder, inputValidationErrorForeground, inputValidationInfoBackground, inputValidationInfoBorder, inputValidationInfoForeground, inputValidationWarningBackground, inputValidationWarningBorder, inputValidationWarningForeground, keybindingLabelBackground, keybindingLabelBorder, keybindingLabelBottomBorder, keybindingLabelForeground, radioActiveBackground, radioActiveBorder, radioActiveForeground, radioInactiveBackground, radioInactiveBorder, radioInactiveForeground, radioInactiveHoverBackground, selectBackground, selectBorder, selectForeground, selectListBackground };
