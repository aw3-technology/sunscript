import { __decorate, __param } from '../../../../../../../../external/tslib/tslib.es6.js';
import { h } from '../../../../../base/browser/dom.js';
import './media/chatConfirmationWidget.css.js';
import { Button } from '../../../../../base/browser/ui/button/button.js';
import { Emitter } from '../../../../../base/common/event.js';
import { MarkdownString } from '../../../../../base/common/htmlContent.js';
import { Disposable } from '../../../../../base/common/lifecycle.js';
import { MarkdownRenderer } from '../../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js';
import { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';
import { defaultButtonStyles } from '../../../../../platform/theme/browser/defaultStyles.js';
let ChatConfirmationWidget = class ChatConfirmationWidget extends Disposable {
    get onDidClick() { return this._onDidClick.event; }
    get domNode() {
        return this._domNode;
    }
    setShowButtons(showButton) {
        this.domNode.classList.toggle('hideButtons', !showButton);
    }
    constructor(title, message, buttons, instantiationService) {
        super();
        this.instantiationService = instantiationService;
        this._onDidClick = this._register(( new Emitter()));
        const elements = h('.chat-confirmation-widget@root', [
            h('.chat-confirmation-widget-title@title'),
            h('.chat-confirmation-widget-message@message'),
            h('.chat-confirmation-buttons-container@buttonsContainer'),
        ]);
        this._domNode = elements.root;
        const renderer = this._register(this.instantiationService.createInstance(MarkdownRenderer, {}));
        const renderedTitle = this._register(renderer.render(( new MarkdownString(title))));
        elements.title.appendChild(renderedTitle.element);
        const renderedMessage = this._register(renderer.render(( new MarkdownString(message))));
        elements.message.appendChild(renderedMessage.element);
        buttons.forEach(buttonData => {
            const button = ( new Button(
                elements.buttonsContainer,
                { ...defaultButtonStyles, secondary: buttonData.isSecondary }
            ));
            button.label = buttonData.label;
            this._register(button.onDidClick(() => this._onDidClick.fire(buttonData)));
        });
    }
};
ChatConfirmationWidget = ( __decorate([
    ( __param(3, IInstantiationService))
], ChatConfirmationWidget));
export { ChatConfirmationWidget };
