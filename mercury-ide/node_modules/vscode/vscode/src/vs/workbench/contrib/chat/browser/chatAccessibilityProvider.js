import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import marked_1 from '../../../../../../../external/vscode-marked/lib/marked.esm.js';
import { localize } from '../../../../nls.js';
import { AccessibilityVerbositySettingId } from '../../accessibility/browser/accessibilityConfiguration.js';
import { IAccessibleViewService } from '../../../../platform/accessibility/browser/accessibleView.service.js';
import { isRequestVM, isResponseVM, isWelcomeVM } from '../common/chatViewModel.js';
let ChatAccessibilityProvider = class ChatAccessibilityProvider {
    constructor(_accessibleViewService) {
        this._accessibleViewService = _accessibleViewService;
    }
    getWidgetRole() {
        return 'list';
    }
    getRole(element) {
        return 'listitem';
    }
    getWidgetAriaLabel() {
        return ( localize(7005, "Chat"));
    }
    getAriaLabel(element) {
        if (isRequestVM(element)) {
            return element.messageText;
        }
        if (isResponseVM(element)) {
            return this._getLabelWithCodeBlockCount(element);
        }
        if (isWelcomeVM(element)) {
            return ( (element.content.map(
                c => 'value' in c ? c.value : ( (c.map(followup => followup.message))).join('\n')
            ))).join('\n');
        }
        return '';
    }
    _getLabelWithCodeBlockCount(element) {
        const accessibleViewHint = this._accessibleViewService.getOpenAriaHint(AccessibilityVerbositySettingId.Chat);
        let label = '';
        const fileTreeCount = element.response.value.filter((v) => !('value' in v))?.length ?? 0;
        let fileTreeCountHint = '';
        switch (fileTreeCount) {
            case 0:
                break;
            case 1:
                fileTreeCountHint = ( localize(7006, "1 file tree"));
                break;
            default:
                fileTreeCountHint = ( localize(7007, "{0} file trees", fileTreeCount));
                break;
        }
        const codeBlockCount = marked_1.lexer(( (element.response.toString()))).filter(token => token.type === 'code')?.length ?? 0;
        switch (codeBlockCount) {
            case 0:
                label = accessibleViewHint ? ( localize(
                    7008,
                    "{0} {1} {2}",
                    fileTreeCountHint,
                     (element.response.toString()),
                    accessibleViewHint
                )) : ( localize(
                    7009,
                    "{0} {1}",
                    fileTreeCountHint,
                     (element.response.toString())
                ));
                break;
            case 1:
                label = accessibleViewHint ? ( localize(
                    7010,
                    "{0} 1 code block: {1} {2}",
                    fileTreeCountHint,
                     (element.response.toString()),
                    accessibleViewHint
                )) : ( localize(
                    7011,
                    "{0} 1 code block: {1}",
                    fileTreeCountHint,
                     (element.response.toString())
                ));
                break;
            default:
                label = accessibleViewHint ? ( localize(
                    7012,
                    "{0} {1} code blocks: {2}",
                    fileTreeCountHint,
                    codeBlockCount,
                     (element.response.toString()),
                    accessibleViewHint
                )) : ( localize(
                    7013,
                    "{0} {1} code blocks",
                    fileTreeCountHint,
                    codeBlockCount,
                     (element.response.toString())
                ));
                break;
        }
        return label;
    }
};
ChatAccessibilityProvider = ( (__decorate([
    ( (__param(0, IAccessibleViewService)))
], ChatAccessibilityProvider)));
export { ChatAccessibilityProvider };
