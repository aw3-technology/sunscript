import { __decorate, __param } from '../../../../../../../../external/tslib/tslib.es6.js';
import { $, clearNode, setVisibility, append, addDisposableListener, EventHelper, EventType } from '../../../../../base/browser/dom.js';
import { Disposable, DisposableStore } from '../../../../../base/common/lifecycle.js';
import { Emitter } from '../../../../../base/common/event.js';
import { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';
import { ResourceLabels } from '../../../../browser/labels.js';
import { URI } from '../../../../../base/common/uri.js';
import { FileKind } from '../../../../../platform/files/common/files.js';
import { Range } from '../../../../../editor/common/core/range.js';
import { basename, dirname } from '../../../../../base/common/path.js';
import { localize } from '../../../../../nls.js';
import { ChatResponseReferencePartStatusKind } from '../../common/chatService.js';
import { IOpenerService } from '../../../../../platform/opener/common/opener.service.js';
let ChatAttachmentsContentPart = class ChatAttachmentsContentPart extends Disposable {
    constructor(variables, contentReferences = [], domNode = $('.chat-attached-context'), instantiationService, openerService) {
        super();
        this.variables = variables;
        this.contentReferences = contentReferences;
        this.domNode = domNode;
        this.instantiationService = instantiationService;
        this.openerService = openerService;
        this.attachedContextDisposables = this._register(( (new DisposableStore())));
        this._onDidChangeVisibility = this._register(( (new Emitter())));
        this._contextResourceLabels = this.instantiationService.createInstance(ResourceLabels, { onDidChangeVisibility: this._onDidChangeVisibility.event });
        this.initAttachedContext(domNode);
    }
    initAttachedContext(container) {
        clearNode(container);
        this.attachedContextDisposables.clear();
        setVisibility(Boolean(this.variables.length), this.domNode);
        this.variables.forEach((attachment) => {
            const widget = append(container, $('.chat-attached-context-attachment.show-file-icons'));
            const label = this._contextResourceLabels.create(widget, { supportIcons: true });
            const file = URI.isUri(attachment.value) ? attachment.value : attachment.value && typeof attachment.value === 'object' && 'uri' in attachment.value && URI.isUri(attachment.value.uri) ? attachment.value.uri : undefined;
            const range = attachment.value && typeof attachment.value === 'object' && 'range' in attachment.value && Range.isIRange(attachment.value.range) ? attachment.value.range : undefined;
            const correspondingContentReference = this.contentReferences.find((ref) => 'variableName' in ref.reference && ref.reference.variableName === attachment.name);
            const isAttachmentOmitted = correspondingContentReference?.options?.status?.kind === ChatResponseReferencePartStatusKind.Omitted;
            const isAttachmentPartialOrOmitted = isAttachmentOmitted || correspondingContentReference?.options?.status?.kind === ChatResponseReferencePartStatusKind.Partial;
            if (file) {
                const fileBasename = basename(file.path);
                const fileDirname = dirname(file.path);
                const friendlyName = `${fileBasename} ${fileDirname}`;
                let ariaLabel;
                if (isAttachmentOmitted) {
                    ariaLabel = range ? ( localize(
                        10558,
                        "Omitted: {0}, line {1} to line {2}.",
                        friendlyName,
                        range.startLineNumber,
                        range.endLineNumber
                    )) : ( localize(10559, "Omitted: {0}.", friendlyName));
                }
                else if (isAttachmentPartialOrOmitted) {
                    ariaLabel = range ? ( localize(
                        10560,
                        "Partially attached: {0}, line {1} to line {2}.",
                        friendlyName,
                        range.startLineNumber,
                        range.endLineNumber
                    )) : ( localize(10561, "Partially attached: {0}.", friendlyName));
                }
                else {
                    ariaLabel = range ? ( localize(
                        10562,
                        "Attached: {0}, line {1} to line {2}.",
                        friendlyName,
                        range.startLineNumber,
                        range.endLineNumber
                    )) : ( localize(10563, "Attached: {0}.", friendlyName));
                }
                label.setFile(file, {
                    fileKind: FileKind.FILE,
                    hidePath: true,
                    range,
                    title: correspondingContentReference?.options?.status?.description
                });
                widget.ariaLabel = ariaLabel;
                widget.tabIndex = 0;
                widget.style.cursor = 'pointer';
                this.attachedContextDisposables.add(addDisposableListener(widget, EventType.CLICK, async (e) => {
                    EventHelper.stop(e, true);
                    if (file) {
                        this.openerService.open(file, {
                            fromUserGesture: true,
                            editorOptions: {
                                selection: range
                            }
                        });
                    }
                }));
            }
            else {
                const attachmentLabel = attachment.fullName ?? attachment.name;
                const withIcon = attachment.icon?.id ? `$(${attachment.icon.id}) ${attachmentLabel}` : attachmentLabel;
                label.setLabel(withIcon, correspondingContentReference?.options?.status?.description);
                widget.ariaLabel = ( localize(10564, "Attached context: {0}.", attachment.name));
                widget.tabIndex = 0;
            }
            if (isAttachmentPartialOrOmitted) {
                widget.classList.add('warning');
            }
            const description = correspondingContentReference?.options?.status?.description;
            if (isAttachmentPartialOrOmitted) {
                widget.ariaLabel = `${widget.ariaLabel}${description ? ` ${description}` : ''}`;
                for (const selector of ['.monaco-icon-suffix-container', '.monaco-icon-name-container']) {
                    const element = label.element.querySelector(selector);
                    if (element) {
                        element.classList.add('warning');
                    }
                }
            }
        });
    }
};
ChatAttachmentsContentPart = ( (__decorate([
    ( (__param(3, IInstantiationService))),
    ( (__param(4, IOpenerService)))
], ChatAttachmentsContentPart)));
export { ChatAttachmentsContentPart };
