import { __decorate, __param } from '../../../../../../../../external/tslib/tslib.es6.js';
import { h } from '../../../../../base/browser/dom.js';
import { Button } from '../../../../../base/browser/ui/button/button.js';
import { Disposable } from '../../../../../base/common/lifecycle.js';
import { localize } from '../../../../../nls.js';
import { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.service.js';
import { getCodeCitationsMessage } from '../../common/chatModel.js';
import { IEditorService } from '../../../../services/editor/common/editorService.service.js';
let ChatCodeCitationContentPart = class ChatCodeCitationContentPart extends Disposable {
    constructor(citations, context, editorService, telemetryService) {
        super();
        this.editorService = editorService;
        this.telemetryService = telemetryService;
        const label = getCodeCitationsMessage(citations.citations);
        const elements = h('.chat-code-citation-message@root', [
            h('span.chat-code-citation-label@label'),
            h('.chat-code-citation-button-container@button'),
        ]);
        elements.label.textContent = label + ' - ';
        const button = this._register(( (new Button(elements.button, {
            buttonBackground: undefined,
            buttonBorder: undefined,
            buttonForeground: undefined,
            buttonHoverBackground: undefined,
            buttonSecondaryBackground: undefined,
            buttonSecondaryForeground: undefined,
            buttonSecondaryHoverBackground: undefined,
            buttonSeparator: undefined
        }))));
        button.label = ( localize(10566, "View matches"));
        this._register(button.onDidClick(() => {
            const citationText = `# Code Citations\n\n` + ( (citations.citations.map(
                c => `## License: ${c.license}\n${( (c.value.toString()))}\n\n\`\`\`\n${c.snippet}\n\`\`\`\n\n`
            ))).join('\n');
            this.editorService.openEditor({ resource: undefined, contents: citationText, languageId: 'markdown' });
            this.telemetryService.publicLog2('openedChatCodeCitations');
        }));
        this.domNode = elements.root;
    }
    hasSameContent(other, followingContent, element) {
        return other.kind === 'codeCitations';
    }
};
ChatCodeCitationContentPart = ( (__decorate([
    ( (__param(2, IEditorService))),
    ( (__param(3, ITelemetryService)))
], ChatCodeCitationContentPart)));
export { ChatCodeCitationContentPart };
