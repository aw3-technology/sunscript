import { localize } from '../../../../nls.js';
import { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';
import { language } from '../../../../base/common/platform.js';
const HasSpeechProvider = ( (new RawContextKey('hasSpeechProvider', false, { type: 'boolean', description: ( localize(6234, "A speech provider is registered to the speech service.")) })));
const SpeechToTextInProgress = ( (new RawContextKey(
    'speechToTextInProgress',
    false,
    { type: 'boolean', description: ( localize(6235, "A speech-to-text session is in progress.")) }
)));
const TextToSpeechInProgress = ( (new RawContextKey(
    'textToSpeechInProgress',
    false,
    { type: 'boolean', description: ( localize(6236, "A text-to-speech session is in progress.")) }
)));
var SpeechToTextStatus;
( ((function(SpeechToTextStatus) {
    SpeechToTextStatus[SpeechToTextStatus["Started"] = 1] = "Started";
    SpeechToTextStatus[SpeechToTextStatus["Recognizing"] = 2] = "Recognizing";
    SpeechToTextStatus[SpeechToTextStatus["Recognized"] = 3] = "Recognized";
    SpeechToTextStatus[SpeechToTextStatus["Stopped"] = 4] = "Stopped";
    SpeechToTextStatus[SpeechToTextStatus["Error"] = 5] = "Error";
})(SpeechToTextStatus || (SpeechToTextStatus = {}))));
var TextToSpeechStatus;
( ((function(TextToSpeechStatus) {
    TextToSpeechStatus[TextToSpeechStatus["Started"] = 1] = "Started";
    TextToSpeechStatus[TextToSpeechStatus["Stopped"] = 2] = "Stopped";
    TextToSpeechStatus[TextToSpeechStatus["Error"] = 3] = "Error";
})(TextToSpeechStatus || (TextToSpeechStatus = {}))));
var KeywordRecognitionStatus;
( ((function(KeywordRecognitionStatus) {
    KeywordRecognitionStatus[KeywordRecognitionStatus["Recognized"] = 1] = "Recognized";
    KeywordRecognitionStatus[KeywordRecognitionStatus["Stopped"] = 2] = "Stopped";
    KeywordRecognitionStatus[KeywordRecognitionStatus["Canceled"] = 3] = "Canceled";
})(KeywordRecognitionStatus || (KeywordRecognitionStatus = {}))));
var AccessibilityVoiceSettingId;
( ((function(AccessibilityVoiceSettingId) {
    AccessibilityVoiceSettingId["SpeechTimeout"] = "accessibility.voice.speechTimeout";
    AccessibilityVoiceSettingId["AutoSynthesize"] = "accessibility.voice.autoSynthesize";
    AccessibilityVoiceSettingId["SpeechLanguage"] = "accessibility.voice.speechLanguage";
})(AccessibilityVoiceSettingId || (AccessibilityVoiceSettingId = {}))));
const SPEECH_LANGUAGE_CONFIG = AccessibilityVoiceSettingId.SpeechLanguage;
const SPEECH_LANGUAGES = {
    ['da-DK']: {
        name: ( localize(6237, "Danish (Denmark)"))
    },
    ['de-DE']: {
        name: ( localize(6238, "German (Germany)"))
    },
    ['en-AU']: {
        name: ( localize(6239, "English (Australia)"))
    },
    ['en-CA']: {
        name: ( localize(6240, "English (Canada)"))
    },
    ['en-GB']: {
        name: ( localize(6241, "English (United Kingdom)"))
    },
    ['en-IE']: {
        name: ( localize(6242, "English (Ireland)"))
    },
    ['en-IN']: {
        name: ( localize(6243, "English (India)"))
    },
    ['en-NZ']: {
        name: ( localize(6244, "English (New Zealand)"))
    },
    ['en-US']: {
        name: ( localize(6245, "English (United States)"))
    },
    ['es-ES']: {
        name: ( localize(6246, "Spanish (Spain)"))
    },
    ['es-MX']: {
        name: ( localize(6247, "Spanish (Mexico)"))
    },
    ['fr-CA']: {
        name: ( localize(6248, "French (Canada)"))
    },
    ['fr-FR']: {
        name: ( localize(6249, "French (France)"))
    },
    ['hi-IN']: {
        name: ( localize(6250, "Hindi (India)"))
    },
    ['it-IT']: {
        name: ( localize(6251, "Italian (Italy)"))
    },
    ['ja-JP']: {
        name: ( localize(6252, "Japanese (Japan)"))
    },
    ['ko-KR']: {
        name: ( localize(6253, "Korean (South Korea)"))
    },
    ['nl-NL']: {
        name: ( localize(6254, "Dutch (Netherlands)"))
    },
    ['pt-PT']: {
        name: ( localize(6255, "Portuguese (Portugal)"))
    },
    ['pt-BR']: {
        name: ( localize(6256, "Portuguese (Brazil)"))
    },
    ['ru-RU']: {
        name: ( localize(6257, "Russian (Russia)"))
    },
    ['sv-SE']: {
        name: ( localize(6258, "Swedish (Sweden)"))
    },
    ['tr-TR']: {
        name: ( localize(6259, "Turkish (TÃ¼rkiye)"))
    },
    ['zh-CN']: {
        name: ( localize(6260, "Chinese (Simplified, China)"))
    },
    ['zh-HK']: {
        name: ( localize(6261, "Chinese (Traditional, Hong Kong)"))
    },
    ['zh-TW']: {
        name: ( localize(6262, "Chinese (Traditional, Taiwan)"))
    }
};
function speechLanguageConfigToLanguage(config, lang = language) {
    if (typeof config === 'string') {
        if (config === 'auto') {
            if (lang !== 'en') {
                const langParts = lang.split('-');
                return speechLanguageConfigToLanguage(`${langParts[0]}-${(langParts[1] ?? langParts[0]).toUpperCase()}`);
            }
        }
        else {
            if (SPEECH_LANGUAGES[config]) {
                return config;
            }
        }
    }
    return 'en-US';
}
export { AccessibilityVoiceSettingId, HasSpeechProvider, KeywordRecognitionStatus, SPEECH_LANGUAGES, SPEECH_LANGUAGE_CONFIG, SpeechToTextInProgress, SpeechToTextStatus, TextToSpeechInProgress, TextToSpeechStatus, speechLanguageConfigToLanguage };
