import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { $ } from '../../../../base/browser/dom.js';
import { Button } from '../../../../base/browser/ui/button/button.js';
import { getDefaultHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegateFactory.js';
import { toErrorMessage } from '../../../../base/common/errorMessage.js';
import { DisposableStore } from '../../../../base/common/lifecycle.js';
import { revive } from '../../../../base/common/marshalling.js';
import { URI } from '../../../../base/common/uri.js';
import { IHoverService } from '../../../../platform/hover/browser/hover.service.js';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.service.js';
import { ILabelService } from '../../../../platform/label/common/label.service.js';
import { ILogService } from '../../../../platform/log/common/log.service.js';
import { asCssVariable } from '../../../../platform/theme/common/colorUtils.js';
import { IChatWidgetService } from './chat.service.js';
import { getChatAgentHoverOptions, ChatAgentHover } from './chatAgentHover.js';
import { getFullyQualifiedId } from '../common/chatAgents.js';
import { IChatAgentNameService, IChatAgentService } from '../common/chatAgents.service.js';
import { chatSlashCommandBackground, chatSlashCommandForeground } from '../common/chatColors.js';
import { ChatRequestTextPart, ChatRequestAgentPart, ChatRequestDynamicVariablePart, chatAgentLeader, chatSubcommandLeader } from '../common/chatParserTypes.js';
import { IChatService } from '../common/chatService.service.js';
import { contentRefUrl } from '../common/annotations.js';
import { Lazy } from '../../../../base/common/lazy.js';
import { ICommandService } from '../../../../platform/commands/common/commands.service.js';
const decorationRefUrl = `http://_vscodedecoration_`;
const agentRefUrl = `http://_chatagent_`;
const agentSlashRefUrl = `http://_chatslash_`;
function agentToMarkdown(agent, isClickable, accessor) {
    const chatAgentNameService = accessor.get(IChatAgentNameService);
    const chatAgentService = accessor.get(IChatAgentService);
    const isAllowed = chatAgentNameService.getAgentNameRestriction(agent);
    let name = `${isAllowed ? agent.name : getFullyQualifiedId(agent)}`;
    const isDupe = isAllowed && chatAgentService.agentHasDupeName(agent.id);
    if (isDupe) {
        name += ` (${agent.publisherDisplayName})`;
    }
    const args = { agentId: agent.id, name, isClickable };
    return `[${agent.name}](${agentRefUrl}?${encodeURIComponent(JSON.stringify(args))})`;
}
function agentSlashCommandToMarkdown(agent, command) {
    const text = `${chatSubcommandLeader}${command.name}`;
    const args = { agentId: agent.id, command: command.name };
    return `[${text}](${agentSlashRefUrl}?${encodeURIComponent(JSON.stringify(args))})`;
}
let ChatMarkdownDecorationsRenderer = class ChatMarkdownDecorationsRenderer {
    constructor(keybindingService, labelService, logService, chatAgentService, instantiationService, hoverService, chatService, chatWidgetService, commandService) {
        this.keybindingService = keybindingService;
        this.labelService = labelService;
        this.logService = logService;
        this.chatAgentService = chatAgentService;
        this.instantiationService = instantiationService;
        this.hoverService = hoverService;
        this.chatService = chatService;
        this.chatWidgetService = chatWidgetService;
        this.commandService = commandService;
    }
    convertParsedRequestToMarkdown(parsedRequest) {
        let result = '';
        for (const part of parsedRequest.parts) {
            if (part instanceof ChatRequestTextPart) {
                result += part.text;
            }
            else if (part instanceof ChatRequestAgentPart) {
                result += this.instantiationService.invokeFunction(accessor => agentToMarkdown(part.agent, false, accessor));
            }
            else {
                const uri = part instanceof ChatRequestDynamicVariablePart && part.data instanceof URI ?
                    part.data :
                    undefined;
                const title = uri ? encodeURIComponent(this.labelService.getUriLabel(uri, { relative: true })) :
                    part instanceof ChatRequestAgentPart ? part.agent.id :
                        '';
                const text = part.text;
                result += `[${text}](${decorationRefUrl}?${title})`;
            }
        }
        return result;
    }
    walkTreeAndAnnotateReferenceLinks(element) {
        const store = ( new DisposableStore());
        element.querySelectorAll('a').forEach(a => {
            const href = a.getAttribute('data-href');
            if (href) {
                if (href.startsWith(agentRefUrl)) {
                    let args;
                    try {
                        args = JSON.parse(decodeURIComponent(href.slice(agentRefUrl.length + 1)));
                    }
                    catch (e) {
                        this.logService.error('Invalid chat widget render data JSON', toErrorMessage(e));
                    }
                    if (args) {
                        a.parentElement.replaceChild(this.renderAgentWidget(args, store), a);
                    }
                }
                else if (href.startsWith(agentSlashRefUrl)) {
                    let args;
                    try {
                        args = JSON.parse(decodeURIComponent(href.slice(agentRefUrl.length + 1)));
                    }
                    catch (e) {
                        this.logService.error('Invalid chat slash command render data JSON', toErrorMessage(e));
                    }
                    if (args) {
                        a.parentElement.replaceChild(this.renderSlashCommandWidget(a.textContent, args, store), a);
                    }
                }
                else if (href.startsWith(decorationRefUrl)) {
                    const title = decodeURIComponent(href.slice(decorationRefUrl.length + 1));
                    a.parentElement.replaceChild(this.renderResourceWidget(a.textContent, title), a);
                }
                else if (href.startsWith(contentRefUrl)) {
                    this.renderFileWidget(href, a);
                }
                else if (href.startsWith('command:')) {
                    this.injectKeybindingHint(a, href, this.keybindingService);
                }
            }
        });
        return store;
    }
    renderAgentWidget(args, store) {
        const nameWithLeader = `${chatAgentLeader}${args.name}`;
        let container;
        if (args.isClickable) {
            container = $('span.chat-agent-widget');
            const button = store.add(( new Button(container, {
                buttonBackground: asCssVariable(chatSlashCommandBackground),
                buttonForeground: asCssVariable(chatSlashCommandForeground),
                buttonHoverBackground: undefined
            })));
            button.label = nameWithLeader;
            store.add(button.onDidClick(() => {
                const agent = this.chatAgentService.getAgent(args.agentId);
                const widget = this.chatWidgetService.lastFocusedWidget;
                if (!widget || !agent) {
                    return;
                }
                this.chatService.sendRequest(widget.viewModel.sessionId, agent.metadata.sampleRequest ?? '', { location: widget.location, agentId: agent.id });
            }));
        }
        else {
            container = this.renderResourceWidget(nameWithLeader, undefined);
        }
        const agent = this.chatAgentService.getAgent(args.agentId);
        const hover = ( new Lazy(() => store.add(this.instantiationService.createInstance(ChatAgentHover))));
        store.add(this.hoverService.setupManagedHover(getDefaultHoverDelegate('element'), container, () => {
            hover.value.setAgent(args.agentId);
            return hover.value.domNode;
        }, agent && getChatAgentHoverOptions(() => agent, this.commandService)));
        return container;
    }
    renderSlashCommandWidget(name, args, store) {
        const container = $('span.chat-agent-widget.chat-command-widget');
        const agent = this.chatAgentService.getAgent(args.agentId);
        const button = store.add(( new Button(container, {
            buttonBackground: asCssVariable(chatSlashCommandBackground),
            buttonForeground: asCssVariable(chatSlashCommandForeground),
            buttonHoverBackground: undefined
        })));
        button.label = name;
        store.add(button.onDidClick(() => {
            const widget = this.chatWidgetService.lastFocusedWidget;
            if (!widget || !agent) {
                return;
            }
            const command = agent.slashCommands.find(c => c.name === args.command);
            this.chatService.sendRequest(widget.viewModel.sessionId, command?.sampleRequest ?? '', { location: widget.location, agentId: agent.id, slashCommand: args.command });
        }));
        return container;
    }
    renderFileWidget(href, a) {
        const fullUri = ( URI.parse(href));
        let location;
        try {
            location = revive(JSON.parse(fullUri.fragment));
        }
        catch (err) {
            this.logService.error('Invalid chat widget render data JSON', toErrorMessage(err));
            return;
        }
        if (!location.uri || !URI.isUri(location.uri)) {
            this.logService.error(`Invalid chat widget render data: ${fullUri.fragment}`);
            return;
        }
        const fragment = location.range ? `${location.range.startLineNumber}-${location.range.endLineNumber}` : '';
        a.setAttribute('data-href', ( location.uri.with({ fragment }).toString()));
        const label = this.labelService.getUriLabel(location.uri, { relative: true });
        a.title = location.range ?
            `${label}#${location.range.startLineNumber}-${location.range.endLineNumber}` :
            label;
    }
    renderResourceWidget(name, title) {
        const container = $('span.chat-resource-widget');
        const alias = $('span', undefined, name);
        if (title) {
            alias.title = title;
        }
        container.appendChild(alias);
        return container;
    }
    injectKeybindingHint(a, href, keybindingService) {
        const command = href.match(/command:([^\)]+)/)?.[1];
        if (command) {
            const kb = keybindingService.lookupKeybinding(command);
            if (kb) {
                const keybinding = kb.getLabel();
                if (keybinding) {
                    a.textContent = `${a.textContent} (${keybinding})`;
                }
            }
        }
    }
};
ChatMarkdownDecorationsRenderer = ( __decorate([
    ( __param(0, IKeybindingService)),
    ( __param(1, ILabelService)),
    ( __param(2, ILogService)),
    ( __param(3, IChatAgentService)),
    ( __param(4, IInstantiationService)),
    ( __param(5, IHoverService)),
    ( __param(6, IChatService)),
    ( __param(7, IChatWidgetService)),
    ( __param(8, ICommandService))
], ChatMarkdownDecorationsRenderer));
export { ChatMarkdownDecorationsRenderer, agentSlashCommandToMarkdown, agentToMarkdown };
