import { coalesce } from '../../../base/common/arrays.js';
import { raceCancellation } from '../../../base/common/async.js';
import { toErrorMessage } from '../../../base/common/errorMessage.js';
import { Emitter } from '../../../base/common/event.js';
import { Iterable } from '../../../base/common/iterator.js';
import { Disposable, DisposableMap, DisposableStore } from '../../../base/common/lifecycle.js';
import { revive } from '../../../base/common/marshalling.js';
import { StopWatch } from '../../../base/common/stopwatch.js';
import { assertType } from '../../../base/common/types.js';
import { URI } from '../../../base/common/uri.js';
import { ExtensionIdentifier } from '../../../platform/extensions/common/extensions.js';
import { MainContext } from './extHost.protocol.js';
import { Selection, Range, ChatAgentRequest, ChatAgentResult, ChatFollowup, ChatAgentUserActionEvent, ChatAgentCompletionItem, ChatLocation, ChatAgentValueReference, ChatResponsePart, MarkdownString, ChatResponseMarkdownPart as ChatResponseMarkdownPart$1, ChatResponseMarkdownWithVulnerabilitiesPart as ChatResponseMarkdownWithVulnerabilitiesPart$1, ChatResponseFilesPart, ChatResponseAnchorPart, ChatResponseCommandButtonPart, ChatTask, ChatResponseProgressPart, ChatResponseWarningPart as ChatResponseWarningPart$1, ChatResponseReferencePart, ChatResponseCodeCitationPart, ChatResponseTextEditPart, ChatResponseDetectedParticipantPart, ChatResponseConfirmationPart, ChatTaskResult } from './extHostTypeConverters.js';
import { ChatRequestEditorData, ChatRequestNotebookData, LanguageModelError, ChatRequestTurn, ChatResponseTurn, ChatResultFeedbackKind, ChatResponseMarkdownPart, ChatResponseMarkdownWithVulnerabilitiesPart, ChatResponseWarningPart, ChatResponseTextEditPart as ChatResponseTextEditPart$1, ChatResponseDetectedParticipantPart as ChatResponseDetectedParticipantPart$1, ChatResponseConfirmationPart as ChatResponseConfirmationPart$1, ChatResponseCodeCitationPart as ChatResponseCodeCitationPart$1, ChatResponseReferencePart as ChatResponseReferencePart$1, ThemeIcon, ChatResponseFileTreePart, ChatResponseAnchorPart as ChatResponseAnchorPart$1, ChatResponseCommandButtonPart as ChatResponseCommandButtonPart$1, ChatResponseProgressPart2, MarkdownString as MarkdownString$1 } from './extHostTypes.js';
import { ChatAgentLocation } from '../../contrib/chat/common/chatAgents.js';
import { ChatAgentVoteDirection } from '../../contrib/chat/common/chatService.js';
import { checkProposedApiEnabled, isProposedApiEnabled } from '../../services/extensions/common/extensions.js';
class ChatAgentResponseStream {
    constructor(_extension, _request, _proxy, _commandsConverter, _sessionDisposables) {
        this._extension = _extension;
        this._request = _request;
        this._proxy = _proxy;
        this._commandsConverter = _commandsConverter;
        this._sessionDisposables = _sessionDisposables;
        this._stopWatch = StopWatch.create(false);
        this._isClosed = false;
    }
    close() {
        this._isClosed = true;
    }
    get timings() {
        return {
            firstProgress: this._firstProgress,
            totalElapsed: this._stopWatch.elapsed()
        };
    }
    get apiObject() {
        if (!this._apiObject) {
            const that = this;
            this._stopWatch.reset();
            function throwIfDone(source) {
                if (that._isClosed) {
                    const err = ( new Error('Response stream has been closed'));
                    Error.captureStackTrace(err, source);
                    throw err;
                }
            }
            const _report = (progress, task) => {
                if (typeof this._firstProgress === 'undefined' && 'content' in progress) {
                    this._firstProgress = this._stopWatch.elapsed();
                }
                if (task) {
                    const progressReporterPromise = this._proxy.$handleProgressChunk(this._request.requestId, progress);
                    const progressReporter = {
                        report: (p) => {
                            progressReporterPromise?.then((handle) => {
                                if (handle) {
                                    if (MarkdownString$1.isMarkdownString(p.value)) {
                                        this._proxy.$handleProgressChunk(this._request.requestId, ChatResponseWarningPart$1.from(p), handle);
                                    }
                                    else {
                                        this._proxy.$handleProgressChunk(this._request.requestId, ChatResponseReferencePart.from(p), handle);
                                    }
                                }
                            });
                        }
                    };
                    Promise.all([progressReporterPromise, task?.(progressReporter)]).then(([handle, res]) => {
                        if (handle !== undefined && res !== undefined) {
                            this._proxy.$handleProgressChunk(this._request.requestId, ChatTaskResult.from(res), handle);
                        }
                    });
                }
                else {
                    this._proxy.$handleProgressChunk(this._request.requestId, progress);
                }
            };
            this._apiObject = {
                markdown(value) {
                    throwIfDone(this.markdown);
                    const part = new ChatResponseMarkdownPart(value);
                    const dto = ChatResponseMarkdownPart$1.from(part);
                    _report(dto);
                    return this;
                },
                markdownWithVulnerabilities(value, vulnerabilities) {
                    throwIfDone(this.markdown);
                    if (vulnerabilities) {
                        checkProposedApiEnabled(that._extension, 'chatParticipantAdditions');
                    }
                    const part = new ChatResponseMarkdownWithVulnerabilitiesPart(value, vulnerabilities);
                    const dto = ChatResponseMarkdownWithVulnerabilitiesPart$1.from(part);
                    _report(dto);
                    return this;
                },
                filetree(value, baseUri) {
                    throwIfDone(this.filetree);
                    const part = new ChatResponseFileTreePart(value, baseUri);
                    const dto = ChatResponseFilesPart.from(part);
                    _report(dto);
                    return this;
                },
                anchor(value, title) {
                    throwIfDone(this.anchor);
                    const part = new ChatResponseAnchorPart$1(value, title);
                    const dto = ChatResponseAnchorPart.from(part);
                    _report(dto);
                    return this;
                },
                button(value) {
                    throwIfDone(this.anchor);
                    const part = new ChatResponseCommandButtonPart$1(value);
                    const dto = ChatResponseCommandButtonPart.from(part, that._commandsConverter, that._sessionDisposables);
                    _report(dto);
                    return this;
                },
                progress(value, task) {
                    throwIfDone(this.progress);
                    const part = new ChatResponseProgressPart2(value, task);
                    const dto = task ? ChatTask.from(part) : ChatResponseProgressPart.from(part);
                    _report(dto, task);
                    return this;
                },
                warning(value) {
                    throwIfDone(this.progress);
                    checkProposedApiEnabled(that._extension, 'chatParticipantAdditions');
                    const part = new ChatResponseWarningPart(value);
                    const dto = ChatResponseWarningPart$1.from(part);
                    _report(dto);
                    return this;
                },
                reference(value, iconPath) {
                    return this.reference2(value, iconPath);
                },
                reference2(value, iconPath, options) {
                    throwIfDone(this.reference);
                    if ('variableName' in value) {
                        checkProposedApiEnabled(that._extension, 'chatParticipantAdditions');
                    }
                    if ('variableName' in value && !value.value) {
                        const matchingVarData = that._request.variables.variables.find(v => v.name === value.variableName);
                        if (matchingVarData) {
                            let references;
                            if (matchingVarData.references?.length) {
                                references = ( matchingVarData.references.map(r => ({
                                    kind: 'reference',
                                    reference: { variableName: value.variableName, value: r.reference }
                                })));
                            }
                            else {
                                const part = new ChatResponseReferencePart$1(value, iconPath, options);
                                const dto = ChatResponseReferencePart.from(part);
                                references = [dto];
                            }
                            references.forEach(r => _report(r));
                            return this;
                        }
                    }
                    else {
                        const part = new ChatResponseReferencePart$1(value, iconPath, options);
                        const dto = ChatResponseReferencePart.from(part);
                        _report(dto);
                    }
                    return this;
                },
                codeCitation(value, license, snippet) {
                    throwIfDone(this.codeCitation);
                    checkProposedApiEnabled(that._extension, 'chatParticipantAdditions');
                    const part = new ChatResponseCodeCitationPart$1(value, license, snippet);
                    const dto = ChatResponseCodeCitationPart.from(part);
                    _report(dto);
                },
                textEdit(target, edits) {
                    throwIfDone(this.textEdit);
                    checkProposedApiEnabled(that._extension, 'chatParticipantAdditions');
                    const part = new ChatResponseTextEditPart$1(target, edits);
                    const dto = ChatResponseTextEditPart.from(part);
                    _report(dto);
                    return this;
                },
                detectedParticipant(participant, command) {
                    throwIfDone(this.detectedParticipant);
                    checkProposedApiEnabled(that._extension, 'chatParticipantAdditions');
                    const part = new ChatResponseDetectedParticipantPart$1(participant, command);
                    const dto = ChatResponseDetectedParticipantPart.from(part);
                    _report(dto);
                    return this;
                },
                confirmation(title, message, data, buttons) {
                    throwIfDone(this.confirmation);
                    checkProposedApiEnabled(that._extension, 'chatParticipantAdditions');
                    const part = new ChatResponseConfirmationPart$1(title, message, data, buttons);
                    const dto = ChatResponseConfirmationPart.from(part);
                    _report(dto);
                    return this;
                },
                push(part) {
                    throwIfDone(this.push);
                    if (part instanceof ChatResponseTextEditPart$1 ||
                        part instanceof ChatResponseMarkdownWithVulnerabilitiesPart ||
                        part instanceof ChatResponseDetectedParticipantPart$1 ||
                        part instanceof ChatResponseWarningPart ||
                        part instanceof ChatResponseConfirmationPart$1 ||
                        part instanceof ChatResponseCodeCitationPart$1) {
                        checkProposedApiEnabled(that._extension, 'chatParticipantAdditions');
                    }
                    if (part instanceof ChatResponseReferencePart$1) {
                        this.reference2(part.value, part.iconPath, part.options);
                    }
                    else {
                        const dto = ChatResponsePart.from(part, that._commandsConverter, that._sessionDisposables);
                        _report(dto);
                    }
                    return this;
                },
            };
        }
        return this._apiObject;
    }
}
class ExtHostChatAgents2 extends Disposable {
    static { this._idPool = 0; }
    constructor(mainContext, _logService, _commands, _documents) {
        super();
        this._logService = _logService;
        this._commands = _commands;
        this._documents = _documents;
        this._agents = ( new Map());
        this._sessionDisposables = this._register(( new DisposableMap()));
        this._completionDisposables = this._register(( new DisposableMap()));
        this._proxy = ( mainContext.getProxy(MainContext.MainThreadChatAgents2));
    }
    transferActiveChat(newWorkspace) {
        this._proxy.$transferActiveChatSession(newWorkspace);
    }
    createChatAgent(extension, id, handler) {
        const handle = ExtHostChatAgents2._idPool++;
        const agent = ( new ExtHostChatAgent(extension, id, this._proxy, handle, handler));
        this._agents.set(handle, agent);
        this._proxy.$registerAgent(handle, extension.identifier, id, {}, undefined);
        return agent.apiAgent;
    }
    createDynamicChatAgent(extension, id, dynamicProps, handler) {
        const handle = ExtHostChatAgents2._idPool++;
        const agent = ( new ExtHostChatAgent(extension, id, this._proxy, handle, handler));
        this._agents.set(handle, agent);
        this._proxy.$registerAgent(handle, extension.identifier, id, { isSticky: true }, dynamicProps);
        return agent.apiAgent;
    }
    async $invokeAgent(handle, requestDto, context, token) {
        const agent = this._agents.get(handle);
        if (!agent) {
            throw ( new Error(
                `[CHAT](${handle}) CANNOT invoke agent because the agent is not registered`
            ));
        }
        const request = revive(requestDto);
        let sessionDisposables = this._sessionDisposables.get(request.sessionId);
        if (!sessionDisposables) {
            sessionDisposables = ( new DisposableStore());
            this._sessionDisposables.set(request.sessionId, sessionDisposables);
        }
        const stream = ( new ChatAgentResponseStream(
            agent.extension,
            request,
            this._proxy,
            this._commands.converter,
            sessionDisposables
        ));
        try {
            const convertedHistory = await this.prepareHistoryTurns(request.agentId, context);
            let location2;
            if (request.locationData?.type === ChatAgentLocation.Editor) {
                const document = this._documents.getDocument(request.locationData.document);
                location2 = new ChatRequestEditorData(document, Selection.to(request.locationData.selection), Range.to(request.locationData.wholeRange));
            }
            else if (request.locationData?.type === ChatAgentLocation.Notebook) {
                const cell = this._documents.getDocument(request.locationData.sessionInputUri);
                location2 = new ChatRequestNotebookData(cell);
            }
            else if (request.locationData?.type === ChatAgentLocation.Terminal) {
            }
            const task = agent.invoke(ChatAgentRequest.to(request, location2), { history: convertedHistory }, stream.apiObject, token);
            return await raceCancellation(Promise.resolve(task).then((result) => {
                if (result?.metadata) {
                    try {
                        JSON.stringify(result.metadata);
                    }
                    catch (err) {
                        const msg = `result.metadata MUST be JSON.stringify-able. Got error: ${err.message}`;
                        this._logService.error(`[${agent.extension.identifier.value}] [@${agent.id}] ${msg}`, agent.extension);
                        return { errorDetails: { message: msg }, timings: stream.timings };
                    }
                }
                let errorDetails;
                if (result?.errorDetails) {
                    errorDetails = {
                        ...result.errorDetails,
                        responseIsIncomplete: true
                    };
                }
                if (errorDetails?.responseIsRedacted) {
                    checkProposedApiEnabled(agent.extension, 'chatParticipantPrivate');
                }
                return { errorDetails, timings: stream.timings, metadata: result?.metadata };
            }), token);
        }
        catch (e) {
            this._logService.error(e, agent.extension);
            if (e instanceof LanguageModelError && e.cause) {
                e = e.cause;
            }
            return { errorDetails: { message: toErrorMessage(e), responseIsIncomplete: true } };
        }
        finally {
            stream.close();
        }
    }
    async prepareHistoryTurns(agentId, context) {
        const res = [];
        for (const h of context.history) {
            const ehResult = ChatAgentResult.to(h.result);
            const result = agentId === h.request.agentId ?
                ehResult :
                { ...ehResult, metadata: undefined };
            const varsWithoutTools = ( h.request.variables.variables
                .filter(v => !v.isTool)
                .map(ChatAgentValueReference.to));
            res.push(new ChatRequestTurn(h.request.message, h.request.command, varsWithoutTools, h.request.agentId));
            const parts = coalesce(( h.response.map(r => ChatResponsePart.toContent(r, this._commands.converter))));
            res.push(new ChatResponseTurn(parts, result, h.request.agentId, h.request.command));
        }
        return res;
    }
    $releaseSession(sessionId) {
        this._sessionDisposables.deleteAndDispose(sessionId);
    }
    async $provideFollowups(requestDto, handle, result, context, token) {
        const agent = this._agents.get(handle);
        if (!agent) {
            return Promise.resolve([]);
        }
        const request = revive(requestDto);
        const convertedHistory = await this.prepareHistoryTurns(agent.id, context);
        const ehResult = ChatAgentResult.to(result);
        return ( (await agent.provideFollowups(ehResult, { history: convertedHistory }, token))
            .filter(f => {
            const isValid = !f.participant || ( Iterable.some(( this._agents.values()), a => a.id === f.participant && ExtensionIdentifier.equals(a.extension.identifier, agent.extension.identifier)));
            if (!isValid) {
                this._logService.warn(`[@${agent.id}] ChatFollowup refers to an unknown participant: ${f.participant}`);
            }
            return isValid;
        })
            .map(f => ChatFollowup.from(f, request)));
    }
    $acceptFeedback(handle, result, vote, reportIssue) {
        const agent = this._agents.get(handle);
        if (!agent) {
            return;
        }
        const ehResult = ChatAgentResult.to(result);
        let kind;
        switch (vote) {
            case ChatAgentVoteDirection.Down:
                kind = ChatResultFeedbackKind.Unhelpful;
                break;
            case ChatAgentVoteDirection.Up:
                kind = ChatResultFeedbackKind.Helpful;
                break;
        }
        agent.acceptFeedback(reportIssue ?
            ( Object.freeze({ result: ehResult, kind, reportIssue })) :
            ( Object.freeze({ result: ehResult, kind })));
    }
    $acceptAction(handle, result, event) {
        const agent = this._agents.get(handle);
        if (!agent) {
            return;
        }
        if (event.action.kind === 'vote') {
            return;
        }
        const ehAction = ChatAgentUserActionEvent.to(result, event, this._commands.converter);
        if (ehAction) {
            agent.acceptAction(( Object.freeze(ehAction)));
        }
    }
    async $invokeCompletionProvider(handle, query, token) {
        const agent = this._agents.get(handle);
        if (!agent) {
            return [];
        }
        let disposables = this._completionDisposables.get(handle);
        if (disposables) {
            disposables.clear();
        }
        else {
            disposables = ( new DisposableStore());
            this._completionDisposables.set(handle, disposables);
        }
        const items = await agent.invokeCompletionProvider(query, token);
        return ( items.map(
            (i) => ChatAgentCompletionItem.from(i, this._commands.converter, disposables)
        ));
    }
    async $provideWelcomeMessage(handle, location, token) {
        const agent = this._agents.get(handle);
        if (!agent) {
            return;
        }
        return await agent.provideWelcomeMessage(ChatLocation.to(location), token);
    }
    async $provideSampleQuestions(handle, location, token) {
        const agent = this._agents.get(handle);
        if (!agent) {
            return;
        }
        return ( (await agent.provideSampleQuestions(ChatLocation.to(location), token))
            .map(f => ChatFollowup.from(f, undefined)));
    }
}
class ExtHostChatAgent {
    constructor(extension, id, _proxy, _handle, _requestHandler) {
        this.extension = extension;
        this.id = id;
        this._proxy = _proxy;
        this._handle = _handle;
        this._requestHandler = _requestHandler;
        this._onDidReceiveFeedback = ( new Emitter());
        this._onDidPerformAction = ( new Emitter());
    }
    acceptFeedback(feedback) {
        this._onDidReceiveFeedback.fire(feedback);
    }
    acceptAction(event) {
        this._onDidPerformAction.fire(event);
    }
    async invokeCompletionProvider(query, token) {
        if (!this._agentVariableProvider) {
            return [];
        }
        return (await this._agentVariableProvider.provider.provideCompletionItems(query, token)) ?? [];
    }
    async provideFollowups(result, context, token) {
        if (!this._followupProvider) {
            return [];
        }
        const followups = await this._followupProvider.provideFollowups(result, context, token);
        if (!followups) {
            return [];
        }
        return followups
            .filter(f => !(f && 'commandId' in f))
            .filter(f => !(f && 'message' in f));
    }
    async provideWelcomeMessage(location, token) {
        if (!this._welcomeMessageProvider) {
            return [];
        }
        const content = await this._welcomeMessageProvider.provideWelcomeMessage(location, token);
        if (!content) {
            return [];
        }
        return ( content.map(item => {
            if (typeof item === 'string') {
                return item;
            }
            else {
                return MarkdownString.from(item);
            }
        }));
    }
    async provideSampleQuestions(location, token) {
        if (!this._welcomeMessageProvider || !this._welcomeMessageProvider.provideSampleQuestions) {
            return [];
        }
        const content = await this._welcomeMessageProvider.provideSampleQuestions(location, token);
        if (!content) {
            return [];
        }
        return content;
    }
    get apiAgent() {
        let disposed = false;
        let updateScheduled = false;
        const updateMetadataSoon = () => {
            if (disposed) {
                return;
            }
            if (updateScheduled) {
                return;
            }
            updateScheduled = true;
            queueMicrotask(() => {
                this._proxy.$updateAgent(this._handle, {
                    icon: !this._iconPath ? undefined :
                        this._iconPath instanceof URI ? this._iconPath :
                            'light' in this._iconPath ? this._iconPath.light :
                                undefined,
                    iconDark: !this._iconPath ? undefined :
                        'dark' in this._iconPath ? this._iconPath.dark :
                            undefined,
                    themeIcon: this._iconPath instanceof ThemeIcon ? this._iconPath : undefined,
                    hasFollowups: this._followupProvider !== undefined,
                    isSecondary: this._isSecondary,
                    helpTextPrefix: (!this._helpTextPrefix || typeof this._helpTextPrefix === 'string') ? this._helpTextPrefix : MarkdownString.from(this._helpTextPrefix),
                    helpTextVariablesPrefix: (!this._helpTextVariablesPrefix || typeof this._helpTextVariablesPrefix === 'string') ? this._helpTextVariablesPrefix : MarkdownString.from(this._helpTextVariablesPrefix),
                    helpTextPostfix: (!this._helpTextPostfix || typeof this._helpTextPostfix === 'string') ? this._helpTextPostfix : MarkdownString.from(this._helpTextPostfix),
                    supportIssueReporting: this._supportIssueReporting,
                    requester: this._requester,
                    supportsSlowVariables: this._supportsSlowReferences,
                });
                updateScheduled = false;
            });
        };
        const that = this;
        return {
            get id() {
                return that.id;
            },
            get iconPath() {
                return that._iconPath;
            },
            set iconPath(v) {
                that._iconPath = v;
                updateMetadataSoon();
            },
            get requestHandler() {
                return that._requestHandler;
            },
            set requestHandler(v) {
                assertType(typeof v === 'function', 'Invalid request handler');
                that._requestHandler = v;
            },
            get followupProvider() {
                return that._followupProvider;
            },
            set followupProvider(v) {
                that._followupProvider = v;
                updateMetadataSoon();
            },
            get isDefault() {
                checkProposedApiEnabled(that.extension, 'defaultChatParticipant');
                return that._isDefault;
            },
            set isDefault(v) {
                checkProposedApiEnabled(that.extension, 'defaultChatParticipant');
                that._isDefault = v;
                updateMetadataSoon();
            },
            get helpTextPrefix() {
                checkProposedApiEnabled(that.extension, 'defaultChatParticipant');
                return that._helpTextPrefix;
            },
            set helpTextPrefix(v) {
                checkProposedApiEnabled(that.extension, 'defaultChatParticipant');
                that._helpTextPrefix = v;
                updateMetadataSoon();
            },
            get helpTextVariablesPrefix() {
                checkProposedApiEnabled(that.extension, 'defaultChatParticipant');
                return that._helpTextVariablesPrefix;
            },
            set helpTextVariablesPrefix(v) {
                checkProposedApiEnabled(that.extension, 'defaultChatParticipant');
                that._helpTextVariablesPrefix = v;
                updateMetadataSoon();
            },
            get helpTextPostfix() {
                checkProposedApiEnabled(that.extension, 'defaultChatParticipant');
                return that._helpTextPostfix;
            },
            set helpTextPostfix(v) {
                checkProposedApiEnabled(that.extension, 'defaultChatParticipant');
                that._helpTextPostfix = v;
                updateMetadataSoon();
            },
            get isSecondary() {
                checkProposedApiEnabled(that.extension, 'defaultChatParticipant');
                return that._isSecondary;
            },
            set isSecondary(v) {
                checkProposedApiEnabled(that.extension, 'defaultChatParticipant');
                that._isSecondary = v;
                updateMetadataSoon();
            },
            get supportIssueReporting() {
                checkProposedApiEnabled(that.extension, 'chatParticipantPrivate');
                return that._supportIssueReporting;
            },
            set supportIssueReporting(v) {
                checkProposedApiEnabled(that.extension, 'chatParticipantPrivate');
                that._supportIssueReporting = v;
                updateMetadataSoon();
            },
            get onDidReceiveFeedback() {
                return that._onDidReceiveFeedback.event;
            },
            set participantVariableProvider(v) {
                checkProposedApiEnabled(that.extension, 'chatParticipantAdditions');
                that._agentVariableProvider = v;
                if (v) {
                    if (!v.triggerCharacters.length) {
                        throw ( new Error('triggerCharacters are required'));
                    }
                    that._proxy.$registerAgentCompletionsProvider(that._handle, that.id, v.triggerCharacters);
                }
                else {
                    that._proxy.$unregisterAgentCompletionsProvider(that._handle, that.id);
                }
            },
            get participantVariableProvider() {
                checkProposedApiEnabled(that.extension, 'chatParticipantAdditions');
                return that._agentVariableProvider;
            },
            set welcomeMessageProvider(v) {
                checkProposedApiEnabled(that.extension, 'defaultChatParticipant');
                that._welcomeMessageProvider = v;
                updateMetadataSoon();
            },
            get welcomeMessageProvider() {
                checkProposedApiEnabled(that.extension, 'defaultChatParticipant');
                return that._welcomeMessageProvider;
            },
            onDidPerformAction: !isProposedApiEnabled(this.extension, 'chatParticipantAdditions')
                ? undefined
                : this._onDidPerformAction.event,
            set requester(v) {
                that._requester = v;
                updateMetadataSoon();
            },
            get requester() {
                return that._requester;
            },
            set supportsSlowReferences(v) {
                checkProposedApiEnabled(that.extension, 'chatParticipantPrivate');
                that._supportsSlowReferences = v;
                updateMetadataSoon();
            },
            get supportsSlowReferences() {
                checkProposedApiEnabled(that.extension, 'chatParticipantPrivate');
                return that._supportsSlowReferences;
            },
            dispose() {
                disposed = true;
                that._followupProvider = undefined;
                that._onDidReceiveFeedback.dispose();
                that._proxy.$unregisterAgent(that._handle);
            },
        };
    }
    invoke(request, context, response, token) {
        return this._requestHandler(request, context, response, token);
    }
}
export { ExtHostChatAgents2 };
