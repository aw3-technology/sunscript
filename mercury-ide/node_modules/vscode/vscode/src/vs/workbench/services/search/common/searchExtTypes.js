import { asArray } from '../../../../base/common/arrays.js';
var TextSearchCompleteMessageType;
( (function(TextSearchCompleteMessageType) {
    TextSearchCompleteMessageType[TextSearchCompleteMessageType["Information"] = 1] = "Information";
    TextSearchCompleteMessageType[TextSearchCompleteMessageType["Warning"] = 2] = "Warning";
})(TextSearchCompleteMessageType || (TextSearchCompleteMessageType = {})));
class TextSearchMatchNew {
    constructor(uri, ranges, previewText) {
        this.uri = uri;
        this.ranges = ranges;
        this.previewText = previewText;
    }
}
class TextSearchContextNew {
    constructor(uri, text, lineNumber) {
        this.uri = uri;
        this.text = text;
        this.lineNumber = lineNumber;
    }
}
var ExcludeSettingOptions;
( (function(ExcludeSettingOptions) {
    ExcludeSettingOptions[ExcludeSettingOptions["none"] = 1] = "none";
    ExcludeSettingOptions[ExcludeSettingOptions["filesExclude"] = 2] = "filesExclude";
    ExcludeSettingOptions[ExcludeSettingOptions["searchAndFilesExclude"] = 3] = "searchAndFilesExclude";
})(ExcludeSettingOptions || (ExcludeSettingOptions = {})));
var TextSearchCompleteMessageTypeNew;
( (function(TextSearchCompleteMessageTypeNew) {
    TextSearchCompleteMessageTypeNew[TextSearchCompleteMessageTypeNew["Information"] = 1] = "Information";
    TextSearchCompleteMessageTypeNew[TextSearchCompleteMessageTypeNew["Warning"] = 2] = "Warning";
})(
    TextSearchCompleteMessageTypeNew || (TextSearchCompleteMessageTypeNew = {})
));
function isTextSearchMatch(object) {
    return 'uri' in object && 'ranges' in object && 'preview' in object;
}
function oldToNewTextSearchResult(result) {
    if (isTextSearchMatch(result)) {
        const ranges = ( asArray(result.ranges).map(r => ({ sourceRange: r, previewRange: r })));
        return ( new TextSearchMatchNew(result.uri, ranges, result.preview.text));
    }
    else {
        return ( new TextSearchContextNew(result.uri, result.text, result.lineNumber));
    }
}
export { ExcludeSettingOptions, TextSearchCompleteMessageType, TextSearchCompleteMessageTypeNew, TextSearchContextNew, TextSearchMatchNew, oldToNewTextSearchResult };
