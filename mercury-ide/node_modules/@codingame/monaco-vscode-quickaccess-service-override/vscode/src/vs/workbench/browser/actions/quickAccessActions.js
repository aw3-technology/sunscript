import { localize2, localize } from 'vscode/vscode/vs/nls';
import { registerAction2, Action2, MenuId } from 'vscode/vscode/vs/platform/actions/common/actions';
import { KeyMod, KeyCode } from 'vscode/vscode/vs/base/common/keyCodes';
import { KeybindingsRegistry, KeybindingWeight } from 'vscode/vscode/vs/platform/keybinding/common/keybindingsRegistry';
import { ItemActivation } from 'vscode/vscode/vs/platform/quickinput/common/quickInput';
import { IQuickInputService } from 'vscode/vscode/vs/platform/quickinput/common/quickInput.service';
import { IKeybindingService } from 'vscode/vscode/vs/platform/keybinding/common/keybinding.service';
import { CommandsRegistry } from 'vscode/vscode/vs/platform/commands/common/commands';
import { inQuickPickContext, getQuickNavigateHandler, defaultQuickAccessContext } from 'vscode/vscode/vs/workbench/browser/quickaccess';
import { Codicon } from 'vscode/vscode/vs/base/common/codicons';

const globalQuickAccessKeybinding = {
    primary: KeyMod.CtrlCmd | KeyCode.KeyP,
    secondary: [KeyMod.CtrlCmd | KeyCode.KeyE],
    mac: { primary: KeyMod.CtrlCmd | KeyCode.KeyP, secondary: undefined }
};
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.closeQuickOpen',
    weight: KeybindingWeight.WorkbenchContrib,
    when: inQuickPickContext,
    primary: KeyCode.Escape, secondary: [KeyMod.Shift | KeyCode.Escape],
    handler: accessor => {
        const quickInputService = accessor.get(IQuickInputService);
        return quickInputService.cancel();
    }
});
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.acceptSelectedQuickOpenItem',
    weight: KeybindingWeight.WorkbenchContrib,
    when: inQuickPickContext,
    primary: 0,
    handler: accessor => {
        const quickInputService = accessor.get(IQuickInputService);
        return quickInputService.accept();
    }
});
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.alternativeAcceptSelectedQuickOpenItem',
    weight: KeybindingWeight.WorkbenchContrib,
    when: inQuickPickContext,
    primary: 0,
    handler: accessor => {
        const quickInputService = accessor.get(IQuickInputService);
        return quickInputService.accept({ ctrlCmd: true, alt: false });
    }
});
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.focusQuickOpen',
    weight: KeybindingWeight.WorkbenchContrib,
    when: inQuickPickContext,
    primary: 0,
    handler: accessor => {
        const quickInputService = accessor.get(IQuickInputService);
        quickInputService.focus();
    }
});
const quickAccessNavigateNextInFilePickerId = 'workbench.action.quickOpenNavigateNextInFilePicker';
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: quickAccessNavigateNextInFilePickerId,
    weight: KeybindingWeight.WorkbenchContrib + 50,
    handler: getQuickNavigateHandler(quickAccessNavigateNextInFilePickerId, true),
    when: defaultQuickAccessContext,
    primary: globalQuickAccessKeybinding.primary,
    secondary: globalQuickAccessKeybinding.secondary,
    mac: globalQuickAccessKeybinding.mac
});
const quickAccessNavigatePreviousInFilePickerId = 'workbench.action.quickOpenNavigatePreviousInFilePicker';
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: quickAccessNavigatePreviousInFilePickerId,
    weight: KeybindingWeight.WorkbenchContrib + 50,
    handler: getQuickNavigateHandler(quickAccessNavigatePreviousInFilePickerId, false),
    when: defaultQuickAccessContext,
    primary: globalQuickAccessKeybinding.primary | KeyMod.Shift,
    secondary: [globalQuickAccessKeybinding.secondary[0] | KeyMod.Shift],
    mac: {
        primary: globalQuickAccessKeybinding.mac.primary | KeyMod.Shift,
        secondary: undefined
    }
});
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.quickPickManyToggle',
    weight: KeybindingWeight.WorkbenchContrib,
    when: inQuickPickContext,
    primary: 0,
    handler: accessor => {
        const quickInputService = accessor.get(IQuickInputService);
        quickInputService.toggle();
    }
});
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.quickInputBack',
    weight: KeybindingWeight.WorkbenchContrib + 50,
    when: inQuickPickContext,
    primary: 0,
    win: { primary: KeyMod.Alt | KeyCode.LeftArrow },
    mac: { primary: KeyMod.WinCtrl | KeyCode.Minus },
    linux: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Minus },
    handler: accessor => {
        const quickInputService = accessor.get(IQuickInputService);
        quickInputService.back();
    }
});
registerAction2(class QuickAccessAction extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.quickOpen',
            title: ( localize2(889, "Go to File...")),
            metadata: {
                description: `Quick access`,
                args: [{
                        name: 'prefix',
                        schema: {
                            'type': 'string'
                        }
                    }]
            },
            keybinding: {
                weight: KeybindingWeight.WorkbenchContrib,
                primary: globalQuickAccessKeybinding.primary,
                secondary: globalQuickAccessKeybinding.secondary,
                mac: globalQuickAccessKeybinding.mac
            },
            f1: true
        });
    }
    run(accessor, prefix) {
        const quickInputService = accessor.get(IQuickInputService);
        quickInputService.quickAccess.show(typeof prefix === 'string' ? prefix : undefined, { preserveValue: typeof prefix === 'string'  });
    }
});
registerAction2(class QuickAccessAction extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.quickOpenWithModes',
            title: ( localize(890, "Quick Open")),
            icon: Codicon.search,
            menu: {
                id: MenuId.CommandCenterCenter,
                order: 100
            }
        });
    }
    run(accessor) {
        const quickInputService = accessor.get(IQuickInputService);
        quickInputService.quickAccess.show(undefined, {
            preserveValue: true,
            providerOptions: {
                includeHelp: true,
                from: 'commandCenter',
            }
        });
    }
});
CommandsRegistry.registerCommand('workbench.action.quickOpenPreviousEditor', async (accessor) => {
    const quickInputService = accessor.get(IQuickInputService);
    quickInputService.quickAccess.show('', { itemActivation: ItemActivation.SECOND });
});
class BaseQuickAccessNavigateAction extends Action2 {
    constructor(id, title, next, quickNavigate, keybinding) {
        super({ id, title, f1: true, keybinding });
        this.id = id;
        this.next = next;
        this.quickNavigate = quickNavigate;
    }
    async run(accessor) {
        const keybindingService = accessor.get(IKeybindingService);
        const quickInputService = accessor.get(IQuickInputService);
        const keys = keybindingService.lookupKeybindings(this.id);
        const quickNavigate = this.quickNavigate ? { keybindings: keys } : undefined;
        quickInputService.navigate(this.next, quickNavigate);
    }
}
class QuickAccessNavigateNextAction extends BaseQuickAccessNavigateAction {
    constructor() {
        super('workbench.action.quickOpenNavigateNext', ( localize2(891, 'Navigate Next in Quick Open')), true, true);
    }
}
class QuickAccessNavigatePreviousAction extends BaseQuickAccessNavigateAction {
    constructor() {
        super('workbench.action.quickOpenNavigatePrevious', ( localize2(892, 'Navigate Previous in Quick Open')), false, true);
    }
}
class QuickAccessSelectNextAction extends BaseQuickAccessNavigateAction {
    constructor() {
        super('workbench.action.quickOpenSelectNext', ( localize2(893, 'Select Next in Quick Open')), true, false, {
            weight: KeybindingWeight.WorkbenchContrib + 50,
            when: inQuickPickContext,
            primary: 0,
            mac: { primary: KeyMod.WinCtrl | KeyCode.KeyN }
        });
    }
}
class QuickAccessSelectPreviousAction extends BaseQuickAccessNavigateAction {
    constructor() {
        super('workbench.action.quickOpenSelectPrevious', ( localize2(894, 'Select Previous in Quick Open')), false, false, {
            weight: KeybindingWeight.WorkbenchContrib + 50,
            when: inQuickPickContext,
            primary: 0,
            mac: { primary: KeyMod.WinCtrl | KeyCode.KeyP }
        });
    }
}
registerAction2(QuickAccessSelectNextAction);
registerAction2(QuickAccessSelectPreviousAction);
registerAction2(QuickAccessNavigateNextAction);
registerAction2(QuickAccessNavigatePreviousAction);
