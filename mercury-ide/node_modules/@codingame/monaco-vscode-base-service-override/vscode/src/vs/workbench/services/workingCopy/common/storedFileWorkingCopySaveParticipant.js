import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';
import { raceCancellation } from 'vscode/vscode/vs/base/common/async';
import { ILogService } from 'vscode/vscode/vs/platform/log/common/log.service';
import { Disposable, toDisposable } from 'vscode/vscode/vs/base/common/lifecycle';
import { insert } from 'vscode/vscode/vs/base/common/arrays';

let StoredFileWorkingCopySaveParticipant = class StoredFileWorkingCopySaveParticipant extends Disposable {
    get length() { return this.saveParticipants.length; }
    constructor(logService) {
        super();
        this.logService = logService;
        this.saveParticipants = [];
    }
    addSaveParticipant(participant) {
        const remove = insert(this.saveParticipants, participant);
        return toDisposable(() => remove());
    }
    async participate(workingCopy, context, progress, token) {
        workingCopy.model?.pushStackElement();
        for (const saveParticipant of this.saveParticipants) {
            if (token.isCancellationRequested || workingCopy.isDisposed()) {
                break;
            }
            try {
                const promise = saveParticipant.participate(workingCopy, context, progress, token);
                await raceCancellation(promise, token);
            }
            catch (err) {
                this.logService.warn(err);
            }
        }
        workingCopy.model?.pushStackElement();
    }
    dispose() {
        this.saveParticipants.splice(0, this.saveParticipants.length);
        super.dispose();
    }
};
StoredFileWorkingCopySaveParticipant = ( __decorate([
    ( __param(0, ILogService))
], StoredFileWorkingCopySaveParticipant));

export { StoredFileWorkingCopySaveParticipant };
