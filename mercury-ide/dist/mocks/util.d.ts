export declare function promisify<T extends Function>(fn: T): (...args: any[]) => Promise<any>;
export declare function callbackify<T extends (...args: any[]) => Promise<any>>(fn: T): (...args: any[]) => void;
export declare function deprecate<T extends Function>(fn: T, msg: string): T;
export declare function debuglog(section: string): Function;
export declare function format(f: string, ...args: any[]): string;
export declare function inherits(ctor: Function, superCtor: Function): void;
export declare function inspect(obj: any, options?: any): string;
export declare function isArray(arg: any): arg is Array<any>;
export declare function isBoolean(arg: any): arg is boolean;
export declare function isNull(arg: any): arg is null;
export declare function isNullOrUndefined(arg: any): arg is null | undefined;
export declare function isNumber(arg: any): arg is number;
export declare function isString(arg: any): arg is string;
export declare function isSymbol(arg: any): arg is symbol;
export declare function isUndefined(arg: any): arg is undefined;
export declare function isObject(arg: any): boolean;
export declare function isPrimitive(arg: any): boolean;
export declare function isFunction(arg: any): arg is Function;
declare const _default: {
    promisify: typeof promisify;
    callbackify: typeof callbackify;
    deprecate: typeof deprecate;
    debuglog: typeof debuglog;
    format: typeof format;
    inherits: typeof inherits;
    inspect: typeof inspect;
    isArray: typeof isArray;
    isBoolean: typeof isBoolean;
    isNull: typeof isNull;
    isNullOrUndefined: typeof isNullOrUndefined;
    isNumber: typeof isNumber;
    isString: typeof isString;
    isSymbol: typeof isSymbol;
    isUndefined: typeof isUndefined;
    isObject: typeof isObject;
    isPrimitive: typeof isPrimitive;
    isFunction: typeof isFunction;
};
export default _default;
